// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package rabbitmqconnector.actions;

import java.io.IOException;
import java.util.HashMap;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.rabbitmq.client.*;
import rabbitmqconnector.helper.RabbitMQConnectorHelper;
import rabbitmqconnector.proxies.ConfigurationType;
import rabbitmqconnector.proxies.RMQConfiguration;

public class SubscribeToExchange extends CustomJavaAction<Boolean>
{
	private IMendixObject __configuration;
	private rabbitmqconnector.proxies.RMQConfiguration configuration;

	public SubscribeToExchange(IContext context, IMendixObject configuration)
	{
		super(context);
		this.__configuration = configuration;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		this.configuration = __configuration == null ? null : rabbitmqconnector.proxies.RMQConfiguration.initialize(getContext(), __configuration);

		// BEGIN USER CODE
		validateInput(configuration);
		Connection connection = null;
	
		try {
			ConnectionFactory factory = RabbitMQConnectorHelper.createConnectionFactory(configuration);
		    connection = factory.newConnection();
		    final Channel channel = connection.createChannel();
		    String queueName = setChannelProperties(channel, configuration);
		    String microflowName = configuration.getRMQConfiguration_Microflows().getCompleteName();
		    String inputName = configuration.getRMQConfiguration_Microflows().getMicroflows_InputParameter().get(0).getName();
		    Consumer consumer = new DefaultConsumer(channel) {
		      @Override
		      public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {
		        String message = new String(body, "UTF-8");
		        Core.getLogger("Handle message").debug("Message received: " + message);
		        HashMap<String, Object> parameters = new HashMap<String, Object>();
		        parameters.put(inputName, message);
		        IContext systemContext = Core.createSystemContext();
		        try {
					Core.execute(systemContext, microflowName, parameters);
				} catch (CoreException e) {
					Core.getLogger("Handle message").error("Error handling message: " + message, e);
				} finally {
					channel.basicAck(envelope.getDeliveryTag(), false);
				}
		      }
		    };
		    channel.basicConsume(queueName, false, consumer);
		} catch (Exception e) {
			if (connection != null) connection.close();
			throw new MendixRuntimeException("Failed to subscribe to exchange " + configuration.getExchangeName() + " at " +configuration.getHostName() +".", e);
		}
	    return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "SubscribeToExchange";
	}

	// BEGIN EXTRA CODE
	private void validateInput(RMQConfiguration configuration) throws CoreException {
		if (configuration == null) throw new IllegalArgumentException("Input object is empty");
		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("rMQConfiguration", configuration.getMendixObject());
		Boolean validConfiguration = Core.execute(getContext(), "RabbitMQConnector.RMQConfiguration_ValidateSubscribe", params);
		if (!validConfiguration) throw new IllegalArgumentException("Configuration is not valid.");
		Boolean validMicroflow = Core.execute(getContext(), "RabbitMQConnector.RMQConfiguration_ValidateMicroflow", params);
		if (!validMicroflow) throw new IllegalArgumentException("Configured microflow is not valid, see log for more details.");
	}
	
	private String setChannelProperties(Channel channel, RMQConfiguration configuration) throws IOException {
		String exchangeName = configuration.getExchangeName();
		ConfigurationType configurationType = configuration.getConfigurationType();
		String queueName = null;
		String sendType = null;
	    if (configurationType == ConfigurationType.Subscribe) {
	    	sendType = "fanout";
	    	queueName = channel.queueDeclare().getQueue();
	    }
	    else {
	    	sendType = "direct";
	    	channel.basicQos(configuration.getConcurrentMessages());
	    	queueName = exchangeName + "_queue";
	    	channel.queueDeclare(queueName, true, false, false, null);
	    }
		if (configuration.getCreateExchange()) channel.exchangeDeclare(configuration.getExchangeName(), sendType, configuration.getIsDurable(), configuration.getIsAutoDelete(), null);
		channel.queueBind(queueName, exchangeName, "");
	    return queueName;
	}
	// END EXTRA CODE
}
