// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package rabbitmqconnector.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.rabbitmq.client.ConnectionFactory;
import rabbitmqconnector.proxies.ConfigurationType;
import rabbitmqconnector.proxies.Message;
import rabbitmqconnector.proxies.PublishAction;
import rabbitmqconnector.proxies.RMQConfiguration;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.AMQP.BasicProperties;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.MessageProperties;
import rabbitmqconnector.helper.RabbitMQConnectorHelper;

public class PublishMessages extends CustomJavaAction<Boolean>
{
	private IMendixObject __publishAction;
	private rabbitmqconnector.proxies.PublishAction publishAction;

	public PublishMessages(IContext context, IMendixObject publishAction)
	{
		super(context);
		this.__publishAction = publishAction;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		this.publishAction = __publishAction == null ? null : rabbitmqconnector.proxies.PublishAction.initialize(getContext(), __publishAction);

		// BEGIN USER CODE
		validateInput(publishAction);
		List<Message> messages = publishAction.getmessages();
		if (messages == null) return true;
		Connection connection = null;
		Channel channel = null;
		try {
			RMQConfiguration configuration = publishAction.getconfiguration();
			ConnectionFactory factory = RabbitMQConnectorHelper.createConnectionFactory(configuration);
	        connection = factory.newConnection();
			channel = connection.createChannel();
			setChannelProperties(channel, configuration);
			String exchange = configuration.getExchangeName();
			BasicProperties properties = null;
			if (configuration.getPersistMessages()) properties = MessageProperties.PERSISTENT_BASIC; 
			for (Message message : messages) {
				channel.basicPublish(exchange, "", properties, message.getContent().getBytes("UTF-8"));
			}
			if (configuration.getWaitForConfirm()) return channel.waitForConfirms(5000);
		} catch (Exception e) {
			throw new MendixRuntimeException("Failed to publish messages", e);
		} finally {
	        if (channel != null) channel.close();
	        if (connection != null) connection.close();
		}
        return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "PublishMessages";
	}

	// BEGIN EXTRA CODE
	private void validateInput(PublishAction publishAction) throws CoreException {
		if (publishAction == null) throw new IllegalArgumentException("Input object is empty.");
		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("publishAction", publishAction.getMendixObject());
		Boolean validAction = Core.execute(getContext(), "RabbitMQConnector.PublishAction_ValidatePublish", params);
		if (!validAction) throw new IllegalArgumentException("Configured publishAction is not valid.");
	}
	
	private void setChannelProperties(Channel channel, RMQConfiguration configuration) throws IOException {
		String sendType = "direct";
		ConfigurationType configurationType = configuration.getConfigurationType();
		if (configurationType == ConfigurationType.Publish) sendType = "fanout";
		String exchangeName = configuration.getExchangeName();
		channel.exchangeDeclare(exchangeName, sendType, configuration.getIsDurable(), configuration.getIsAutoDelete(), null);
		if (configurationType == ConfigurationType.Queue_publisher) {
	    	String queueName = exchangeName + "_queue";
	    	channel.queueDeclare(queueName, true, false, false, null);
	    	channel.queueBind(queueName, exchangeName, "");
		}
		if (configuration.getWaitForConfirm()) channel.confirmSelect();
	}
	// END EXTRA CODE
}
